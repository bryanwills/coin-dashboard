import { NextResponse } from 'next/server';
import { Pool } from 'pg';
import { IncomingForm, Fields, Files } from 'formidable';
import fs from 'fs';
import path from 'path';

// Initialize a PostgreSQL connection pool
const pool = new Pool({
  user: process.env.PG_USER,
  host: process.env.PG_HOST,
  database: process.env.PG_DATABASE,
  password: process.env.PG_PASSWORD,
  port: Number(process.env.PG_PORT),
});

// Fetch all coins from the database
export async function GET() {
  try {
    const result = await pool.query('SELECT * FROM coins');
    return NextResponse.json(result.rows);
  } catch (error) {
    console.error('Error fetching coins:', error);
    return NextResponse.json({ error: 'Failed to fetch coins' }, { status: 500 });
  }
}

// Handle file uploads and add a new coin to the database
export async function POST(req: Request) {
  const form = new IncomingForm();
  const uploadDir = path.join(process.cwd(), 'public/uploads');
  form.uploadDir = uploadDir;
  form.keepExtensions = true;

  // Ensure the upload directory exists
  fs.mkdirSync(uploadDir, { recursive: true });

  // Parse the incoming form data
  const { fields, files }: { fields: Fields; files: Files } = await new Promise((resolve, reject) => {
    form.parse(req as any, (err, fields, files) => {
      if (err) reject(err);
      resolve({ fields, files });
    });
  });

  try {
    // Process uploaded images
    const images = Array.isArray(files.images)
      ? files.images.map((file) => `/uploads/${path.basename(file.path)}`)
      : files.images
      ? [`/uploads/${path.basename(files.images.path)}`]
      : [];

    // Insert the new coin into the database
    await pool.query(
      'INSERT INTO coins (name, year, denomination, price, condition, potential_value, images) VALUES ($1, $2, $3, $4, $5, $6, $7)',
      [
        fields.name,
        parseInt(fields.year as string, 10),
        fields.denomination,
        parseFloat(fields.price as string),
        fields.condition,
        fields.potential_value ? parseFloat(fields.potential_value as string) : null,
        images,
      ]
    );

    return NextResponse.json({ message: 'Coin created successfully!' });
  } catch (error) {
    console.error('Error creating coin:', error);
    return NextResponse.json({ error: 'Failed to create coin' }, { status: 500 });
  }
}
